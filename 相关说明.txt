4. 输出结果
CSV文件：amazon_{country}.csv

图片文件：images/{country}/目录

运行日志：amazon.log

四、核心功能说明
颜色变体智能检测：

支持按钮式/下拉式/图片式三种变体形式

自动合并基础商品信息与变体专属数据

独立存储颜色样本图

反爬优化体系：

动态UA池（含移动端伪装）

智能代理轮换机制

请求频率自动调节

Referer链自动生成

数据完整性保障：

ASIN去重机制

价格信息清洗

自动异常重试

时间戳记录

五、扩展建议
分布式扩展：

python
复制
# 安装scrapy-redis后修改settings.py
SCHEDULER = "scrapy_redis.scheduler.Scheduler"
DUPEFILTER_CLASS = "scrapy_redis.dupefilter.RFPDupeFilter"
验证码处理：

python
复制
# 在middlewares.py中添加
def process_response(self, request, response, spider):
    if 'captcha' in response.url:
        return solve_captcha(response)  # 需实现验证码破解
    return response
动态渲染支持：

bash
复制
pip install scrapy-splash
# 在settings.py中配置Splash
本代码经过多轮优化，建议在实际使用时：

根据目标网站结构调整CSS选择器

配置高质量代理服务

合理设置请求频率参数

定期维护UA数据库



三、关键优化点说明
多模式变体检测：

支持按钮式/下拉菜单式/图片式三种变体形式

使用组合选择器确保覆盖率

添加data-asin属性验证

变体数据完整性：

python
复制
# 采集字段包括：
- 颜色名称（自动清理多余字符）
- 颜色样本图（swatch image）
- 变体专属主图和多角度图片
- 变体ASIN和独立价格
智能请求调度：

为变体请求添加特殊标记

缩短变体页面超时时间（15秒）

自动跳过无效变体URL

反爬优化策略：

python
复制
# 变体请求特殊处理
- 使用不同的请求头参数
- 自动插入referer链
- 动态调整请求频率
四、使用效果验证
测试命令：

bash
复制
scrapy crawl amazon -a country=us -a keyword=shoes -o variants.json
预期输出结构：

json
复制
{
  "title": "Running Shoes (Navy Blue)",
  "asin": "B08XYZ1234",
  "color_name": "Navy Blue",
  "swatch_image": "https://m.media-amazon.com/images/...swatch.jpg",
  "variant_images": [
    "https://m.media-amazon.com/images/...main.jpg",
    "https://m.media-amazon.com/images/...angle1.jpg"
  ],
  "price": "$59.99",
  "currency": "USD"
}
五、常见问题解决方案
问题1：变体页面返回相同内容

解决方案：在中间件中添加参数随机化

python
复制
# 在请求中添加随机参数
def process_request(self, request, spider):
    if 'variant' in request.meta:
        request = request.replace(
            url=request.url + f'&_={int(time.time())}'
        )
    return request
问题2：颜色名称提取不准确

优化提取方法：

python
复制
def clean_color_name(self, raw_str):
    """清理颜色名称"""
    return re.sub(
        r'(\s*-\s*)?(color|colour|色|カラー)\s*:?\s*', 
        '', 
        raw_str, 
        flags=re.IGNORECASE
    ).strip()
六、性能优化建议
并行处理改进：

python
复制
# 在settings.py中增加
CONCURRENT_REQUESTS_PER_IP = 2  # 每个IP的并发限制
DOWNLOAD_DELAY = 1.5            # 基础下载延迟
智能缓存机制：

python
复制
# 启用缓存（修改settings.py）
HTTPCACHE_ENABLED = True
HTTPCACHE_EXPIRATION_SECS = 3600  # 1小时缓存
最终代码整合说明：

将上述代码片段整合到对应文件中

需要新增VariantPipeline到ITEM_PIPELINES

在爬虫初始化时加载颜色名称清洗规则

添加测试用例验证变体采集逻辑

完整代码文件已根据Scrapy 2.11+版本适配，如需进一步调试建议：

使用scrapy shell测试选择器

启用详细日志scrapy crawl ... --loglevel=DEBUG

使用中间件调试模式